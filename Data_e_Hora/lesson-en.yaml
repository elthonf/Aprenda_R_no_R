- Class: meta
  Course: R Programming
  Lesson: Dates and Times
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.11

- Class: text
  Output: R has a special way of representing dates and times, which can be helpful if you're working with data that show how something changes over time (i.e. time-series data) or if your data contain some other temporal information, like dates of birth.

- Class: text
  Output: Dates are represented by the 'Date' class and times are represented by the 'POSIXct' and 'POSIXlt' classes. Internally, dates are stored as the number of days since 1970-01-01 and times are stored as either the number of seconds since 1970-01-01 (for 'POSIXct') or a list of seconds, minutes, hours, etc. (for 'POSIXlt').

- Class: cmd_question
  Output: Let's start by using d1 <- Sys.Date() to get the current date and store it in the variable d1. (That's the letter 'd' and the number 1.)
  CorrectAnswer: d1 <- Sys.Date()
  AnswerTests: omnitest(correctExpr='d1 <- Sys.Date()')
  Hint: Type d1 <- Sys.Date() to get the current date and store it in a new variable called d1.

- Class: cmd_question
  Output: Use the class() function to confirm d1 is a Date object.
  CorrectAnswer: class(d1)
  AnswerTests: omnitest(correctExpr='class(d1)')
  Hint: class(d1) will tell you the class of d1.

- Class: cmd_question
  Output: We can use the unclass() function to see what d1 looks like internally. Try it out.
  CorrectAnswer: unclass(d1)
  AnswerTests: omnitest(correctExpr='unclass(d1)')
  Hint: Use unclass(d1) to see what d1 looks like internally.

- Class: text
  Output: That's the exact number of days since 1970-01-01!

- Class: cmd_question
  Output: However, if you print d1 to the console, you'll get today's date -- YEAR-MONTH-DAY. Give it a try.
  CorrectAnswer: d1
  AnswerTests: omnitest(correctExpr='d1')
  Hint: Type d1 to print its contents.

- Class: cmd_question
  Output: What if we need to reference a date prior to 1970-01-01? Create a variable d2 containing as.Date("1969-01-01").
  CorrectAnswer: d2 <- as.Date("1969-01-01")
  AnswerTests: omnitest(correctExpr='d2 <- as.Date("1969-01-01")')
  Hint: Try d2 <- as.Date("1969-01-01").

- Class: cmd_question
  Output: Now use unclass() again to see what d2 looks like internally.
  CorrectAnswer: unclass(d2)
  AnswerTests: omnitest(correctExpr='unclass(d2)')
  Hint: unclass(d2) will show you what d2 looks like internally.

- Class: text
  Output: As you may have anticipated, you get a negative number. In this case, it's -365, since 1969-01-01 is exactly one calendar year (i.e. 365 days) BEFORE 1970-01-01.

- Class: cmd_question
  Output: Now, let's take a look at how R stores times. You can access the current date and time using the Sys.time() function with no arguments. Do this and store the result in a variable called t1.
  CorrectAnswer: t1 <- Sys.time()
  AnswerTests: omnitest(correctExpr='t1 <- Sys.time()')
  Hint: t1 <- Sys.time() will store the current date and time in a variable called t1.

- Class: cmd_question
  Output: View the contents of t1.
  CorrectAnswer: t1
  AnswerTests: omnitest(correctExpr='t1')
  Hint: Type t1 to view its contents.

- Class: cmd_question
  Output: And check the class() of t1.
  CorrectAnswer: class(t1)
  AnswerTests: omnitest(correctExpr='class(t1)')
  Hint: View the class of t1 with class(t1).

- Class: cmd_question
  Output: As mentioned earlier, POSIXct is just one of two ways that R represents time information. (You can ignore the second value above, POSIXt, which just functions as a common language between POSIXct and POSIXlt.) Use unclass() to see what t1 looks like internally -- the (large) number of seconds since the beginning of 1970.
  CorrectAnswer: unclass(t1)
  AnswerTests: omnitest(correctExpr='unclass(t1)')
  Hint: Use unclass(t1) to see how many seconds have passed since the beginning of 1970.

- Class: cmd_question
  Output: By default, Sys.time() returns an object of class POSIXct, but we can coerce the result to POSIXlt with as.POSIXlt(Sys.time()). Give it a try and store the result in t2.
  CorrectAnswer: t2 <- as.POSIXlt(Sys.time())
  AnswerTests: omnitest(correctExpr='t2 <- as.POSIXlt(Sys.time())')
  Hint: t2 <- as.POSIXlt(Sys.time()) will coerce the result of Sys.time to 'POSIXlt' and store the result.

- Class: cmd_question
  Output: Check the class of t2.
  CorrectAnswer: class(t2)
  AnswerTests: omnitest(correctExpr='class(t2)')
  Hint: Type class(t2) to view its class.

- Class: cmd_question
  Output: Now view its contents.
  CorrectAnswer: t2
  AnswerTests: omnitest(correctExpr='t2')
  Hint: Type t2 to view its contents.

- Class: cmd_question
  Output: The printed format of t2 is identical to that of t1. Now unclass() t2 to see how it is different internally.
  CorrectAnswer: unclass(t2)
  AnswerTests: omnitest(correctExpr='unclass(t2)')
  Hint: Use unclass(t2) to view its internal structure.

- Class: cmd_question
  Output: t2, like all POSIXlt objects, is just a list of values that make up the date and time. Use str(unclass(t2)) to have a more compact view.
  CorrectAnswer: str(unclass(t2))
  AnswerTests: omnitest(correctExpr='str(unclass(t2))')
  Hint: Use str(unclass(t2)) to view its internal structure in a more compact way.

- Class: cmd_question
  Output: If, for example, we want just the minutes from the time stored in t2, we can access them with t2$min. Give it a try.
  CorrectAnswer: t2$min
  AnswerTests: omnitest(correctExpr='t2$min')
  Hint: t2$min will give you the number of minutes from the time stored in t2.

- Class: text
  Output: Now that we have explored all three types of date and time objects, let's look at a few functions that extract useful information from any of these objects -- weekdays(), months(), and quarters().

- Class: cmd_question
  Output: The weekdays() function will return the day of week from any date or time object. Try it out on d1, which is the Date object that contains today's date.
  CorrectAnswer: weekdays(d1)
  AnswerTests: omnitest(correctExpr='weekdays(d1)')
  Hint: Try weekdays(d1) to get the day of the week.

- Class: cmd_question
  Output: The months() function also works on any date or time object. Try it on t1, which is the POSIXct object that contains the current time (well, it was the current time when you created it).
  CorrectAnswer: months(t1)
  AnswerTests: omnitest(correctExpr='months(t1)')
  Hint: months(t1) will give you the current month.

- Class: cmd_question
  Output: The quarters() function returns the quarter of the year (Q1-Q4) from any date or time object. Try it on t2, which is the POSIXlt object that contains the time at which you created it.
  CorrectAnswer: quarters(t2)
  AnswerTests: omnitest(correctExpr='quarters(t2)')
  Hint: quarters(t2) will give you the current quarter.

- Class: text
  Output: Often, the dates and times in a dataset will be in a format that R does not recognize. The strptime() function can be helpful in this situation.

- Class: text
  Output: strptime() converts character vectors to POSIXlt. In that sense, it is similar to as.POSIXlt(), except that the input doesn't have to be in a particular format (YYYY-MM-DD).

- Class: cmd_question
  Output: 'To see how it works, store the following character string in a variable called t3: "October 17, 1986 08:24" (with the quotes).'
  CorrectAnswer: t3 <- "October 17, 1986 08:24"
  AnswerTests: omnitest(correctExpr='t3 <- "October 17, 1986 08:24"')
  Hint: Store "October 17, 1986 08:24" (including the quotes) in a new variable called t3.

- Class: cmd_question
  Output: 'Now, use strptime(t3, "%B %d, %Y %H:%M") to help R convert our date/time object to a format that it understands. Assign the result to a new variable called t4. (You should pull up the documentation for strptime() if you''d like to know more about how it works.)'
  CorrectAnswer: t4 <- strptime(t3, "%B %d, %Y %H:%M")
  AnswerTests: omnitest(correctExpr='t4 <- strptime(t3, "%B %d, %Y %H:%M")')
  Hint: 't4 <- strptime(t3, "%B %d, %Y %H:%M") will convert our date/time object to a format that R understands.'

- Class: cmd_question
  Output: Print the contents of t4.
  CorrectAnswer: t4
  AnswerTests: omnitest(correctExpr='t4')
  Hint: Type t4 to print its contents.

- Class: cmd_question
  Output: That's the format we've come to expect. Now, let's check its class().
  CorrectAnswer: class(t4)
  AnswerTests: omnitest(correctExpr='class(t4)')
  Hint: Type class(t4) to check its class.

- Class: text
  Output: Finally, there are a number of operations that you can perform on dates and times, including arithmetic operations (+ and -) and comparisons (<, ==, etc.) 

- Class: cmd_question
  Output: "The variable t1 contains the time at which you created it (recall you used Sys.time()). Confirm that some time has passed since you created t1 by using the 'greater than' operator to compare it to the current time: Sys.time() > t1"
  CorrectAnswer: Sys.time() > t1
  AnswerTests: omnitest(correctExpr='Sys.time() > t1')
  Hint: Sys.time() > t1 will tell you that the current time is after the time contained in t1 (which was the current time when you created it).

- Class: cmd_question
  Output: So we know that some time has passed, but how much? Try subtracting t1 from the current time using Sys.time() - t1. Don't forget the parentheses at the end of Sys.time(), since it is a function.
  CorrectAnswer: Sys.time() - t1
  AnswerTests: omnitest(correctExpr='Sys.time() - t1')
  Hint: Sys.time() - t1 will give you the amount of time that has passed since t1 was created.

- Class: text
  Output: The same line of thinking applies to addition and the other comparison operators. If you want more control over the units when finding the above difference in times, you can use difftime(), which allows you to specify a 'units' parameter. 

- Class: cmd_question
  Output: Use difftime(Sys.time(), t1, units = 'days') to find the amount of time in DAYS that has passed since you created t1.
  CorrectAnswer: difftime(Sys.time(), t1, units = 'days')
  AnswerTests: match_call("difftime(Sys.time(), t1, units = 'days')")
  Hint: difftime(Sys.time(), t1, units = 'days') will tell you how many days have passed since t1 was created (which better be less than 1!)

- Class: text
  Output: In this lesson, you learned how to work with dates and times in R. While it is important to understand the basics, if you find yourself working with dates and times often, you may want to check out the lubridate package by Hadley Wickham.

- Class: mult_question
  Output: Would you like to inform someone about your successful completion of 
    this lesson via email?
  CorrectAnswer: NULL
  AnswerChoices: Yes; No
  AnswerTests: notify()
  Hint: NULL
  
