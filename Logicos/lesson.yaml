- Class: meta
  Course: Aprenda R no R
  Lesson: Logicos
  Author: Elthon Manhas de Freitas
  Type: Standard
  Organization: FIAP
  Version: 1.0.0
  
- Class: text
  Output: "Esta lição deve ser uma breve introdução sobre valores booleanos e operaçõ\
    es lógicas em R."
    
- Class: text
  Output: "Existem dois valores lógicos em R, também chamados de valores booleanos.\
    \ Eles são TRUE e FALSE. Em R você pode construir expressões\
    \ lógicas que serão avaliadas como TRUE ou FALSE."

- Class: text
  Output: "Muitas das perguntas desta lição envolverão a avaliação\
    \ de expressões lógicas. Se tiver dificuldades, pode ser útil abrir um segundo terminal R onde\
    \ você pode experimentar algumas dessas expressões. Fica a seu critério."
 
- AnswerTests: omnitest(correctExpr='TRUE == TRUE')
  Class: cmd_question
  CorrectAnswer: TRUE == TRUE
  Hint: Use o operador de igualdade e digite TRUE == TRUE
  Output: "Criar expressões lógicas requer operadores lógicos. Você provavelmente\
    \ está familiarizado com operadores aritméticos como `+`, `-`,`*` e `/`. O primeiro operador lógico que vamos discutir é o operador de igualdade,\
    \ representado por dois sinais de igual `==`. Use o operador de igualdade\
    \ abaixo para descobrir se TRUE é igual a TRUE."
    
- Class: text
  Output: "Assim como a aritmética, as expressões lógicas podem ser agrupadas\
    \ por parênteses para que a expressão inteira (TRUE == TRUE) == TRUE seja\
    \ avaliada como TRUE."
    
- AnswerTests: omnitest(correctExpr='(FALSE == TRUE) == FALSE')
  Class: cmd_question
  CorrectAnswer: (FALSE == TRUE) == FALSE
  Hint: 'Tente digitar: (FALSE == TRUE) == FALSE'
  Output: Para testar essa propriedade, tente avaliar (FALSE == TRUE) == FALSE.
  
- AnswerTests: omnitest(correctExpr='6 == 7')
  Class: cmd_question
  CorrectAnswer: 6 == 7
  Hint: Use o operador de igualdade e digite 6 == 7
  Output: "O operador de igualdade também pode ser usado para comparar números.\
    \ Use `==` para ver se 6 é igual a 7."
    
- Class: text
  Output: "A expressão anterior é avaliada como FALSE porque 6 é menor que\
    \ 7. Felizmente, existem operadores de desigualdade que nos permitem testar se\
    \ um valor é menor ou maior que outro valor."
    
- AnswerTests: omnitest(correctExpr='6 < 7')
  Class: cmd_question
  CorrectAnswer: 6 < 7
  Hint: Use o operador menor que e digite 6 < 7
  Output: "O operador menor que '<' testa se o número no lado esquerdo\
    \ do operador (chamado de operando à esquerda) é menor que o número no\
    \ lado direito do operador (chamado operando à direita). Escreva uma expressã\
    o para testar se 6 é menor que 7."

- AnswerTests: omnitest(correctExpr='10 <= 10')
  Class: cmd_question
  CorrectAnswer: 10 <= 10
  Hint: Use o operador `<=` e digite 10 <= 10
  Output: "Existe também um operador menor que ou igual a <= que testa se o\
    \ operando da esquerda é menor ou igual ao operando da direita. Escreva uma\
    \ expressão para testar se 10 é menor ou igual a 10."

- Class: text
  Output: Tenha em mente que existem os operadores correspondentes maiores que `>`
    e maior que ou igual a `>=`.

- AnswerChoices: 9 >= 10; 7 == 7; 6 < 8; 0 > -36
  AnswerTests: omnitest(correctVal='9 >= 10')
  Class: mult_question
  CorrectAnswer: 9 >= 10
  Hint: "Se precisar, você pode avaliar cada expressão em uma sessão R separada\
    \ para encontrar a resposta correta."
  Output: "Qual das seguintes opções é avaliada como FALSE?"

- AnswerChoices: 9 >= 10; 7 == 9; 57 < 8; -6 > -7
  AnswerTests: omnitest(correctVal='-6 > -7')
  Class: mult_question
  CorrectAnswer: -6 > -7
  Hint: "Se precisar, você pode avaliar cada expressão em uma sessão R separada\
    \ para encontrar a resposta correta."
  Output: "Qual das seguintes avaliações é verdadeira?"

- AnswerTests: omnitest(correctExpr='5 != 7')
  Class: cmd_question
  CorrectAnswer: 5 != 7
  Hint: "Use o operador não igual e digite 5 != 7"
  Output: "O próximo operador que discutiremos é o operador `não é igual`\
    \ representado por `!=`. Não é igual testa se dois valores são diferentes,\
    \ então TRUE != FALSE é avaliado como TRUE. Como o operador de igualdade,\
    \ `!=` Também pode ser usado com números. Tente escrever uma expressã\
    o par ver se 5 não é igual a 7."
  
- AnswerTests: any_of_exprs('!5 == 7', '!(5 == 7)')
  Class: cmd_question
  CorrectAnswer: '!5 == 7'
  Hint: "Esta expressão pode ser um pouco complicada, então pense em negar a\
    \ expressão 5 == 7 (tudo que você precisa é um ponto de exclamaçã\
    o na frente)."
  Output: "Para negar expressões booleanas, você pode usar o operador NOT. Um\
    \ ponto de exclamação `!` Fará com que !TRUE (diga: não é verdade)\
    \ avalie para FALSE e! FALSE (diga: não false) para avaliar como TRUE. Tente\
    \ usar o operador NOT e o operador igual para encontrar o oposto de se 5 é\
    \ igual a 7."
    
- Class: text
  Output: "Vamos dar um tempo para rever. O operador equals `==` testa se dois valores\
    \ booleanos ou números são iguais, o operador não igual `! =` Testa\
    \ se dois valores booleanos ou números são desiguais, e o operador NOT `!` nega expressões lógicas para que expressões TRUE se tornem Expressõ\
    es FALSE e FALSE se tornam TRUE."
 
- AnswerChoices: '!(0 >= -1); !FALSE; 7 != 8; 9 < 10'
  AnswerTests: omnitest(correctVal='!(0 >= -1)')
  Class: mult_question
  CorrectAnswer: '!(0 >= -1)'
  Hint: "Se precisar, você pode avaliar cada expressão em uma sessão R separada\
    \ para encontrar a resposta correta."
  Output: "Qual das seguintes opções é avaliada como FALSE?"

- AnswerChoices: TRUE; FALSE; Pode haver verdade objetiva ao programar?; %>%
  AnswerTests: omnitest(correctVal='TRUE')
  Class: mult_question
  CorrectAnswer: true
  Hint: "Tente avaliar cada expressão isoladamente e crie uma resposta."
  Output: "Em que você acha que a seguinte expressão será avaliada ?: (TRUE != FALSE) == !(6 == 7)"
- Class: text
  Output: "Em algum momento, você pode precisar examinar os relacionamentos entre\
    \ várias expressões lógicas. \xC9 aqui que entra o operador AND e o operador\
    \ OR."

- AnswerTests: omnitest(correctExpr='FALSE & FALSE')
  Class: cmd_question
  CorrectAnswer: FALSE & FALSE
  Hint: 'Apenas para ilustrar como funciona o operador AND: FALSE & FALSE'
  Output: "Vamos ver como o operador AND funciona. Existem dois operadores AND em\
    \ R, `&` e `&&`. Ambos os operadores funcionam de forma semelhante,\
    \ se os operandos direito e esquerdo de AND forem ambos TRUE a expressão inteira\
    \ é TRUE, caso contrário, é FALSE. Por exemplo, TRUE & TRUE é\
    \ avaliado como TRUE. Tente digitar FALSE & FALSE como é avaliado."

- AnswerTests: omnitest(correctExpr='TRUE & c(TRUE, FALSE, FALSE)')
  Class: cmd_question
  CorrectAnswer: TRUE & c(TRUE, FALSE, FALSE)
  Hint: 'Agora, para ver como o operador AND trabalha com um vetor, digite: TRUE &
    c(TRUE, FALSE, FALSE)'
  Output: "Você pode usar o operador `&` para avaliar AND através de um\
    \ vetor. A versão `&&` do AND só avalia o primeiro membro de um\
    \ vetor. Vamos testar ambos para praticar. Digite a expressão TRUE &\
    \ c(TRUE, FALSE, FALSE)."
    
- Class: text
  Output: "O que acontece nesse caso é que o operando da esquerda TRUE\
    \ é reciclado em todos os elementos no vetor do operando da direita. Esta é\
    \ a declaração equivalente a c(TRUE, TRUE, TRUE) &\
    \ c(TRUE, FALSE, FALSE)."

- AnswerTests: omnitest(correctExpr='TRUE && c(TRUE, FALSE, FALSE)')
  Class: cmd_question
  CorrectAnswer: TRUE && c(TRUE, FALSE, FALSE)
  Hint: "Como você verá, a versão && do AND funciona de maneira diferente.\
    \ Tipo: TRUE && c(TRUE, FALSE, FALSE)"
  Output: "Agora vamos digitar a mesma expressão, exceto que usaremos o operador\
    \ `&&`. Digite a expressão TRUE && c(TRUE, FALSE, FALSE)."

- Class: text
  Output: "Nesse caso, o operando esquerdo é avaliado apenas com o primeiro membro\
    \ do operando direito (o vetor). O restante dos elementos no vetor não é\
    \ avaliado de forma alguma nessa expressão."

- Class: text
  Output: "O operador OR segue um conjunto similar de regras. A versão `|` do OR\
    \ avalia OR através de um vetor inteiro, enquanto a versão || do OR apenas\
    \ avalia o primeiro membro de um vetor."

- Class: text
  Output: "Uma expressão usando o operador OR será avaliada como TRUE se o operando\
    \ esquerdo ou o operando da direita for TRUE. Se ambos forem TRUE, a expressã\
    o será avaliada como TRUE, no entanto, se nenhum for TRUE, a expressão será\
    \ FALSE."
    
- AnswerTests: omnitest(correctExpr='TRUE | c(TRUE, FALSE, FALSE)')
  Class: cmd_question
  CorrectAnswer: TRUE | c(TRUE, FALSE, FALSE)
  Hint: 'Teste o operador OR vetorizado digitando: TRUE | c(TRUE, FALSE, FALSE)'
  Output: "Vamos testar a versão vetorizada do operador OR. Digite a expressã\
    o TRUE | c(TRUE, FALSE, FALSE)."
    
- AnswerTests: omnitest(correctExpr='TRUE || c(TRUE, FALSE, FALSE)')
  Class: cmd_question
  CorrectAnswer: TRUE || c(TRUE, FALSE, FALSE)
  Hint: "Como você verá o || versão do OR não é vetorizada. Tipo: TRUE\
    \ || c(TRUE, FALSE, FALSE)"
  Output: "Agora vamos experimentar a versão não vetorizada do operador OR.\
    \ Digite a expressão TRUE || c(TRUE, FALSE, FALSE)."
    
- Class: text
  Output: "Os operadores lógicos podem ser encadeados como operadores aritmé\
    ticos. As expressões: `6! = 10 && FALSE && 1> = 2` ou `TRUE || 5 < 9.3 || FALSE` são até comuns de se ver."
    
- AnswerTests: omnitest(correctExpr='5 > 8 || 6 != 8 && 4 > 3.9')
  Class: cmd_question
  CorrectAnswer: 5 > 8 || 6 != 8 && 4 > 3.9
  Hint: "Veja como funciona a ordem das operações digitando: 5 > 8 || 6 != 8 e 4 > 3.9"
  Output: "Como você deve se lembrar, a aritmética tem uma ordem de operaç\
    ões e também expressões lógicas. Todos os operadores AND são avaliados\
    \ antes dos operadores OR. Vamos ver um exemplo de um caso amb\xEDguo. Tipo: 5 > 8 || 6 != 8 e 4 > 3.9"
    
- Class: text
  Output: "Vamos percorrer a ordem das operações no caso acima. Primeiro, os\
    \ operandos esquerdo e direito do operador AND são avaliados. 6 não é\
    \ igual a 8, 4 é maior que 3.9, portanto ambos os operandos são TRUE, entã\
    o a expressão resultante TRUE && TRUE é avaliada como TRUE. Em seguida,\
    \ o operando esquerdo do operador OR é avaliado: 5 não é maior que 8,\
    \ portanto, a expressão inteira é reduzida para FALSE || TRUE. Como o\
    \ operando direito dessa expressão é TRUE, toda a expressão é avaliada\
    \ como TRUE."
    
- AnswerChoices: TRUE && FALSE || 9 >= 4 && 3 < 6; TRUE && 62 < 62 && 44 >= 44; 99.99 > 100 || 45 < 7.3 || 4 != 4.0; FALSE || TRUE && FALSE
  AnswerTests: omnitest(correctVal='TRUE && FALSE || 9 >= 4 && 3 < 6')
  Class: mult_question
  CorrectAnswer: TRUE && FALSE || 9 >= 4 && 3 < 6
  Hint: "Tente avaliar cada expressão isoladamente e crie uma resposta."
  Output: "Qual das seguintes expressões é avaliada como TRUE?"
  
- AnswerChoices: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5; FALSE || TRUE && 6 != 4 || 9 > 4; (8 > 4) || 5 == 5.0 && 7.8 >= 7,79; 6 >= -9 && !(6 > 7) && !(!TRUE)
  AnswerTests: omnitest(correctVal='FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5')
  Class: mult_question
  CorrectAnswer: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
  Hint: "Tente avaliar cada expressão isoladamente e crie uma resposta."
  Output: "Qual das seguintes expressões é avaliada como FALSE?"

- Class: text
  Output: "Agora que você está familiarizado com os operadores lógicos de\
    \ R, você pode tirar proveito de algumas funções que o R fornece para\
    \ lidar com expressões lógicas."
    
- AnswerTests: omnitest(correctExpr='isTRUE(6 > 4)')
  Class: cmd_question
  CorrectAnswer: isTRUE(6 > 4)
  Hint: 'Teste o isTRUE() digitando: isTRUE(6 > 4)'
  Output: "A função isTRUE() recebe um argumento. Se esse argumento for avaliado\
    \ como TRUE, a função retornará TRUE. Caso contrário, a funçã\
    o retornará FALSE. Tente usar essa função digitando: isTRUE(6 > 4)"
    
- AnswerChoices: isTRUE(!TRUE); istrue(3); istrue(NA); !isTRUE(4 < 3); !isTRUE(8 != 5)
  AnswerTests: omnitest(correctVal='!isTRUE(4 < 3)')
  Class: mult_question
  CorrectAnswer: '!isTRUE(4 < 3)'
  Hint: "isTRUE() só retornará TRUE se a instrução passada para ele como\
    \ um argumento for TRUE."
  Output: "Qual das seguintes avaliações é verdadeira?"
 
- AnswerTests: omnitest(correctExpr="identical('twins', 'twins')")
  Class: cmd_question
  CorrectAnswer: identical('twins', 'twins')
  Hint: "Se você quiser ver se dois objetos R são idênticos, digite: identical('twins', 'twins')"
  Output: "A função identical() retornará TRUE se os dois objetos R passados como argumentos forem idênticos. Experimente a função identical() digitando: identical('twins', 'twins')"
  
- AnswerChoices: "identical(5 > 4, 3 < 3.1); identical(4, 3.1); identical('olá', 'alô'); identical(7, 8)"
  AnswerTests: omnitest(correctVal='identical(5 > 4, 3 < 3.1)')
  Class: mult_question
  CorrectAnswer: "identical(5 > 4, 3 < 3.1)"
  Hint: "identical() só será avaliado como verdadeiro se seus argumentos\
    \ forem exatamente os mesmos."
  Output: "Qual das seguintes avaliações é verdadeira?"
  
- AnswerTests: omnitest(correctExpr='xor(5 == 6, !FALSE)')
  Class: cmd_question
  CorrectAnswer: xor(5 == 6, !FALSE)
  Hint: "Teste a função xor () digitando: xor(5 == 6, !FALSE)"
  Output: "Você também deve estar ciente da função xor(), que leva dois\
    \ argumentos. A função xor() significa OU exclusivo. Se um argumento for\
    \ avaliado como TRUE e um argumento for avaliado como FALSE, essa funçã\
    o retornará TRUE, caso contrário, retornará FALSE. Experimente a funç\
    ão xor() digitando: xor(5 == 6, !FALSE)"
    
- Class: text
  Output: "5 == 6 avalia como FALSE, !FALSE avalia como TRUE, então xor (FALSE,\
    \ TRUE) é avaliado como TRUE. Por outro lado, se o primeiro argumento foi alterado\
    \ para 5 == 5 e o segundo argumento não foi alterado, então ambos os argumentos\
    \ teriam sido TRUE, então xor (TRUE, TRUE) teria avaliado como FALSE."
    
- AnswerChoices: "xor(4 >= 9, 8 != 8.0); xor(!isTRUE(TRUE), 6 > -1); xor(identical(xor, 'xor'), 7 == 7.0); xor(!!TRUE, !!FALSE)"
  AnswerTests: omnitest(correctVal='xor(4 >= 9, 8 != 8.0)')
  Class: mult_question
  CorrectAnswer: xor(4 >= 9, 8 != 8.0)
  Hint: Para xor() avaliar como TRUE, um argumento deve ser TRUE e um deve ser FALSE. Qual das opções é avaliada como FALSE?
  Output: "Qual das seguintes opções é avaliada como FALSE?"
  
- AnswerTests: omnitest(correctExpr='ints <- sample(10)')
  Class: cmd_question
  CorrectAnswer: ints <- sample(10)
  Hint: "Para criar um vetor de dez inteiros sem tipo de substituição: ints <- sample(10)"
  Output: "Para as próximas perguntas, precisaremos criar um vetor de inteiros\
    \ chamados ints. Crie este vetor digitando: ints <- sample(10)"
    
- AnswerTests: omnitest(correctExpr='ints')
  Class: cmd_question
  CorrectAnswer: ints
  Hint: 'Para ver o tipo de vetor: ints'
  Output: "Agora simplesmente exiba o conteúdo de ints."
  
- AnswerTests: omnitest(correctExpr='ints > 5')
  Class: cmd_question
  CorrectAnswer: ints > 5
  Hint: "Para ver quais elementos de `ints` são maiores que 5 digite: ints > 5"
  Output: "O vetor `ints` é uma amostragem aleatória de números inteiros\
    \ de 1 a 10 sem substituição. Digamos que quiséssemos fazer algumas perguntas\
    \ lógicas sobre o conteúdo de ints. Se digitarmos ints > 5, obteremos\
    \ um vetor lógico correspondente a cada elemento de ints for maior que 5. Tente\
    \ digitar: ints > 5"
    
- Class: text
  Output: "Podemos usar o vetor lógico resultante para fazer outras perguntas sobre\
    \ o ints. A função which() usa um vetor lógico como argumento e retorna\
    \ os \xEDndices do vetor que são TRUE. Por exemplo, which(c(TRUE, FALSE, TRUE))\
    \ retornaria o vetor c(1, 3)."
    
- AnswerTests: omnitest(correctExpr='which(ints > 7)')
  Class: cmd_question
  CorrectAnswer: which(ints > 7)
  Hint: "Use a função which() no vetor lógico produzido por: `ints > 7`"
  Output: "Use a função which() para encontrar os \xEDndices de ints maiores\
    \ que 7."

- AnswerChoices: ints < 2; ints <= 2; which(ints <2); which(ints <= 2)
  AnswerTests: omnitest(correctVal='which(ints <= 2)')
  Class: mult_question
  CorrectAnswer: which(ints <= 2)
  Hint: "Use a função which()."
  Output: "Qual dos seguintes comandos produziria os \xEDndices dos elementos em ints\
    \ menores ou iguais a 2?"
    
- Class: text
  Output: "Como a função which(), as funções any() e all() usam vetores\
    \ lógicos como argumento. A função any() retornará TRUE se um ou\
    \ mais dos elementos no vetor lógico forem TRUE. A função all () retornará\
    \ TRUE se cada elemento no vetor lógico for TRUE."

- AnswerTests: omnitest(correctExpr='any(ints < 0)')
  Class: cmd_question
  CorrectAnswer: any(ints < 0)
  Hint: "Use a função any() no vetor lógico produzido por: `ints <0`"
  Output: "Use a função any() para ver se algum dos elementos de ints é\
    \ menor que zero."
    
- AnswerTests: omnitest(correctExpr='all(ints > 0)')
  Class: cmd_question
  CorrectAnswer: all(ints > 0)
  Hint: "Use a função all() no vetor lógico produzido por: `ints> 0`"
  Output: "Use a função all() para ver se todos os elementos de ints sã\
    o maiores que zero."

- AnswerChoices: any(ints == 10); all(ints == 10); all(c(TRUE, FALSE, TRUE)); any(ints == 2.5)
  AnswerTests: omnitest(correctVal='any(ints == 10)')
  Class: mult_question
  CorrectAnswer: any(ints == 10)
  Hint: "any() será avaliado como TRUE se houver um ou mais elementos TRUE em\
    \ um vetor lógico."
  Output: "Qual das seguintes avaliações é verdadeira?"
  
- Class: text
  Output: "Isso é tudo para esta introdução à lógica em R. Se você\
    \ realmente quer ver o que você pode fazer com a lógica, confira a liç\
    ão de fluxo de controle!"

- Class: mult_question
  Output: "Gostaria de informar ao professor sobre a conclusão desta lição"
  CorrectAnswer: NULL
  AnswerChoices: Sim; Não
  AnswerTests: notify()
  Hint: Na dúvida, digite Sim :-)
